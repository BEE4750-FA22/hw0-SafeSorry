---
title: "BEE 4750/5750 Homework 0"
author: "Sonjay Lake, SVL24"
date: `j import Dates; Dates.Date(Dates.now())`
weave_options:
  term: true
  results: tex
  cache: off
---

<!-- This setups the environment and installs packages, but doesn't appear in the generated document -->
<!-- You shouldn't need to modify this -->
```julia; echo = false; results = "hidden"
using Pkg
Pkg.activate(".")
Pkg.instantiate()
```

# Problem 1

## Problem 1.1
```julia
function square_number(x)
    return x^2
end
```

## Problem 1.2
```julia; echo= false 
x=5
```
```julia 
print("We can see that $x^2 = $(square_number(x)) ")
```
 



## Problem 1.3
```julia; echo= false
f = square_number
using Plots
plot(f,-10,10, title="X squared",xlabel="x", ylabel="y= x^2", legend=false)
```

# Problem 2

## Problem 2.1
```math
\begin{alignat*}{0}
\text {Assuming that }x > 0 \text { and } a > 0 \text { the } \sqrt{x} \text { will} \\
\text {lie between } \frac{x}{a} \text { and } a \text { because making } \\
a \geq \sqrt{x} \text { will result in} \frac{x}{a} \leq \sqrt{x} \text {and if} \\
a \leq \sqrt{x} \text {, } \frac{x}{a} \geq \sqrt{x} \text {, meaning the true answer} \\
\text {will always lie in the bounds of those expressions.}  

\end{alignat*}
```
## Problem 2.2
```julia
function newton(x)
  if x <0 
    return 0
  else
    a = rand(1:x)   
    a = ((x/a) + a)/2
    while (abs(sqrt(x) - a) > 0.0001)
      a = ((x/a) + a)/2
      end 
    return(round(a, digits=3))
    end  
end 
newton(2)
```
# Problem 3

## Problem 3.1
```julia 
test_vector = rand(20)
```
## Problem 3.2
```julia
function mean(vector)
acc = 0 
  for i in eachindex(vector)
    acc += vector[i]
  end 
  return (acc/(length(vector)))
end 
mean(test_vector)

function demean!(vector)
  for i in eachindex(vector)
    vector[i] -= mean(vector)
  end
  return(vector)
end 

demean!(test_vector)

```

## Problem 3.3
```julia 
Pkg.add("Distributions")
using Distributions
center_six = rand(Distributions.Dirichlet(6,2))
base = ones(10)
base[3:8] = center_six
```
## Problem 3.4
```julia
random_matrix = rand(5,5)
column_means = ones(5)
for i in 1:5
  column_means[i] *= mean(random_matrix[:,i])
end 
global index = 1
for i in eachindex(random_matrix)
  random_matrix[i] -= column_means[index]
  if mod(i,5) == 0
    global index += 1
  end 
end
random_matrix

```
# Problem 4

## Problem 4.1
```julia
mu = log(0.03)
sigma = 0.005
normal_dist = LogNormal(mu,sigma) 
drawing = rand(normal_dist,100)
```
## Problem 4.2
```julia
function simulation(a,y,b,q,T,x)
  #inputs:
  #a = disharge level
  #y = natural runoff vector
  #b,q = phosphorus-cycling parameters
  #T = simulation length time 
  #x = initial phosphorus level

  #outputs:
  #z = time series phosphorus level
  z = ones(T)
  for i in eachindex(z)
    if i == 1
      z[i] = x
    else 
      z[i] = z[i]* (z[i-1] + a + y[i] + ((z[i-1]^q)/(1+(z[i-1]^q))) - (b*z[i-1]))
    end 
  end
  return z
end 
```
## Problem 4.3
```julia; echo= false
x = 1:100
values = simulation(0.42,drawing,0.4,2,100,0)
plot(x,values,title = "Phosphorus v. Time", ylabel = "Time (years)",xlabel="Phosphorus Levels",legend= false)
```
# References
> Stackoverflow, julia documentation, and julialang discourse.